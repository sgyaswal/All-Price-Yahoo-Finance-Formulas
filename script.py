import yfinance as yf
import datetime


# Define the stock symbol
stock_symbol = 'AAPL'  # Corrected the stock symbol to 'AAPL'

# Define the financial metrics you want to retrieve
metrics = [
    # '200DayMovingAverage',
    # '50DayMovingAverage',1
    # '52WeekChange',1
    # '52WeekHigh',1
    # '52WeekLow',1
    # '5YearAverageDividendYield',1
    # 'AnalystRecommendation',1
    # 'AnalystRecommendationRating',1
    # 'AnnualAccountsPayable',
    # 'AnnualAccountsPayableChange',
    # 'AnnualAccountsReceivable',
    # 'AnnualAccountsReceivableChange',
    # 'AnnualAcquisitions',
    # 'AnnualAssetsTotalCash',
    # 'AnnualBasicEPS',
    # 'AnnualBasicSharesOutstanding',
    # 'AnnualBeginningCashPosition',
    # 'AnnualCapitalExpenditures',
    # 'AnnualCapitalLeaseObligations',
    # 'AnnualChangeInCash',
    # 'AnnualChangeInWorkingCapital',
    # 'AnnualCommonStockIssued',
    # 'AnnualCommonStockRepurchased',
    # 'AnnualCostOfRevenue',
    # 'AnnualCurrentAssets',
    # 'AnnualCurrentLiabilities',
    # 'AnnualDebtRepayment',
    # 'AnnualDeferredIncomeTax',
    # 'AnnualDepreciationAndAmortization',
    # 'AnnualDilutedEPS',
    # 'AnnualDilutedSharesOutstanding',
    # 'AnnualDividendsPaid',
    # 'AnnualEarnings',
    # 'AnnualEBITDA',
    # 'AnnualEBITDANormalized',
    # 'AnnualEndCashPosition',
    # 'AnnualFreeCashFlow',
    # 'AnnualGoodwill',
    # 'AnnualGoodwillAndOtherIntangibleAssets',
    # 'AnnualGrossProfit',
    # 'AnnualImpairmentOfCapitalAssets',
    # 'AnnualIncomeContinuingOperations',
    # 'AnnualInterestExpense',
    # 'AnnualInventory',
    # 'AnnualInventoryChange',
    # 'AnnualLongTermDebt',
    # 'AnnualNetDebt',
    # 'AnnualNetPropertyPlantEquipment',
    # 'AnnualOperatingIncome',
    # 'AnnualOtherCashflowsFromInvestingActivities',
    # 'AnnualOtherFinancingActivities',
    # 'AnnualOtherNonCashItems',
    # 'AnnualOtherSpecialIncomeCharges',
    # 'AnnualPretaxIncome',
    # 'AnnualPurchasesOfInvestments',
    # 'AnnualResearchAndDevelopmentExpense',
    # 'AnnualRestructuringAndMergersAcquisition',
    # 'AnnualRevenue',
    # 'AnnualSalesOfInvestments',
    # 'AnnualSellingAndMarketingExpense',
    # 'AnnualSellingGeneralAndAdministrationExpense',
    # 'AnnualSpecialIncomeCharges',
    # 'AnnualStockBasedCompensation',
    # 'AnnualStockholdersEquity',
    # 'AnnualTaxProvision',
    # 'AnnualTotalAssets',
    # 'AnnualTotalCashflowsFromFinancingActivities',
    # 'AnnualTotalCashflowsFromInvestingActivities',
    # 'AnnualTotalCashflowsFromOperatingActivities',
    # 'AnnualTotalDebt',
    # 'AnnualTotalLiabilities',
    # 'AnnualTotalNonCurrentAssets',
    # 'AnnualTotalNonCurrentLiabilities',
    # 'AnnualTotalOperatingExpenses',
    # 'AnnualTotalOtherIncomeExpenseNet',
    # 'AnnualWriteOff',
    # 'Ask',
    # 'AskSize',
    # 'AverageDailyVolume10Day',
    # 'AverageDailyVolume3Month',
    # 'AveragePrice200Day',
    # 'AveragePrice50Day',
    # 'Beta',
    # 'Bid',
    # 'BidSize',
    # 'BookValue',
    # 'City',
    # 'Country',
    # 'Currency',
    # 'CurrentRatio',
    # 'DayChange',
    # 'DayChangePercent',
    # 'DayHigh',
    # 'DayLow',
    # 'DayVolume',
    # 'DebtToEquity',
    # 'DividendsDatePeriod',
    # 'DividendYield',
    # 'EarningsGrowthQuartely',
    # 'EBITDA',
    # 'EnterpriseToEbitda',
    # 'EnterpriseToRevenue',
    # 'EnterpriseValue',
    # 'EPS',
    # 'EPS.Estimate.Average.Annual',
    # 'EPS.Estimate.Average.Quarter',
    # 'EPS.History.Actual.Quarter',
    # 'EPS.History.Date.Quarter',
    # 'EPS.History.Difference.Quarter',
    # 'EPS.History.Estimate.Quarter',
    # 'EPS.History.Surprise.Quarter',
    # 'EPS.Revisions.DownLast30Days.Annual',
    # 'EPS.Revisions.DownLast30Days.Quarter',
    # 'EPS.Revisions.DownLast7Days.Annual',
    # 'EPS.Revisions.DownLast7Days.Quarter',
    # 'EPS.Revisions.UpLast30Days.Annual',
    # 'EPS.Revisions.UpLast30Days.Quarter',
    # 'EPS.Revisions.UpLast7Days.Annual',
    # 'EPS.Revisions.UpLast7Days.Quarter',
    # 'EPSTrend.30DaysAgo.Annual',
    # 'EPSTrend.30DaysAgo.Quarter',
    # 'EPSTrend.60DaysAgo.Annual',
    # 'EPSTrend.60DaysAgo.Quarter',
    # 'EPSTrend.7DaysAgo.Annual',
    # 'EPSTrend.7DaysAgo.Quarter',
    # 'EPSTrend.90DaysAgo.Annual',
    # 'EPSTrend.90DaysAgo.Quarter',
    # 'EPSTrend.Current.Annual',
    # 'EPSTrend.Current.Quarter',
    # 'ESG.ControversyLevel',
    # 'ESG.ControversyLevel.Peer',
    # 'ESG.EnvironmentScore',
    # 'ESG.EnvironmentScore.Peer',
    # 'ESG.GovernanceScore',
    # 'ESG.GovernanceScore.Peer',
    # 'ESG.Involvement.Adult',
    # 'ESG.Involvement.Alcoholic',
    # 'ESG.Involvement.AnimalTesting',
    # 'ESG.Involvement.CatholicValues',
    # 'ESG.Involvement.ControversialWeapons',
    # 'ESG.Involvement.FurLeather',
    # 'ESG.Involvement.Gambling',
    # 'ESG.Involvement.GMO',
    # 'ESG.Involvement.MilitaryContracting',
    # 'ESG.Involvement.Nuclear',
    # 'ESG.Involvement.PalmOil',
    # 'ESG.Involvement.Pesticides',
    # 'ESG.Involvement.SmallArms',
    # 'ESG.Involvement.ThermalCoal',
    # 'ESG.Involvement.Tobacco',
    # 'ESG.SocialScore',
    # 'ESG.SocialScore.Peer',
    # 'ESG.TotalScore',
    # 'ESG.TotalScore.Peer',
    # 'Estimate.Date.Annual',
    # 'Estimate.Date.Quarter',
    # 'Exchange',
    # 'ExDividendDate',
    # 'ExpireDate',
    # 'FinancialsCurrency',
    # 'FiscalYearEnd.Last',
    # 'FiscalYearEnd.Next',
    # 'FloatingShares',
    # 'ForwardAnnualDividendRate',
    # 'ForwardAnnualDividendYield',
    # 'Fund1YReturn',
    # 'Fund3YAverageReturn',
    # 'Fund3YReturn',
    # 'Fund5YAverageReturn',
    # 'FundAnnualTotalReturn',
    # 'FundCategory',
    # 'FundExpenseRatio',
    # 'FundFamily',
    # 'FundHoldingsTurnover',
    # 'FundInception',
    # 'FundNAV',
    # 'FundQuarterlyTotalReturn',
    # 'FundTotalAssets',
    # 'FundTotalNetAssets',
    # 'FundTrailingTotalReturn10Y',
    # 'FundTrailingTotalReturn1M',
    # 'FundTrailingTotalReturn1Y',
    # 'FundTrailingTotalReturn3M',
    # 'FundTrailingTotalReturn3Y',
    # 'FundTrailingTotalReturn5Y',
    # 'FundTrailingTotalReturnYTD',
    # 'FundYTDReturn',
    # 'Growth.Estimate.Annual',
    # 'Growth.Estimate.Quarter',
    # 'HeldInsidersPercent',
    # 'HeldInstitutionsPercent',
    # 'Historic.AdjustedClose',
    # 'Historic.Close',
    # 'Historic.Close.1Hour',
    # 'Historic.Close.1Minute',
    # 'Historic.Close.5Minute',
    # 'Historic.High',
    # 'Historic.High.1Hour',
    # 'Historic.High.1Minute',
    # 'Historic.High.5Minute',
    # 'Historic.Low',
    # 'Historic.Low.1Hour',
    # 'Historic.Low.1Minute',
    # 'Historic.Low.5Minute',
    # 'Historic.Open',
    # 'Historic.Open.1Hour',
    # 'Historic.Open.1Minute',
    # 'Historic.Open.5Minute',
    # 'Historic.Volume',
    # 'HistoricDailyLookback',
    # 'HistoricDailyLookbackAdjustedClose',
    # 'HistoricDailyLookbackClose',
    # 'HistoricDailyWeeklyMonthly',
    # 'HistoricDatePeriod',
    # 'HistoricIntraday',
    # 'HistoricLookbackDailyWeeklyMonthly',
    # 'HistoricMinuteLookback',
    # 'Holdings.Bond',
    # 'Holdings.Cash',
    # 'Holdings.Convertible',
    # 'Holdings.Other',
    # 'Holdings.Preferred',
    # 'Holdings.Stock',
    # 'Holdings.Top10.Name',
    # 'Holdings.Top10.Percent',
    # 'Holdings.Top10.Symbol',
    # 'Industry',
    # 'LeveredFreeCashFlow',
    # 'MarketCap',
    # 'MarketOpen',
    # 'MarketState',
    # 'MorningstarOverallRating',
    # 'MorningstarRiskRating',
    # 'MutualFundYield',
    # 'Name',
    # 'NetIncomeToCommon',
    # 'News',
    # 'News.Headline',
    # 'News.Headlines',
    # 'NextEarningsDate',
    # 'NextEarningsDateEstimate',
    # 'NextEarningsDateEstimateEnd',
    # 'NextEarningsDateEstimateStart',
    # 'OpenInterest',
    # 'OperatingCashFlow',
    # 'OperatingMargins',
    # 'OptionsChain.ExpiryDates',
    # 'OptionsChain.List',
    # 'OptionsChain.Straddle',
    # 'PayoutRatio',
    # 'PEGRatio',
    # 'PERatio',
    # 'PERatioForward',
    # 'PostMarketChange',
    # 'PostMarketChangePercent',
    # 'PostMarketPrice',
    # 'PostMarketTime',
    # 'PreMarketChange',
    # 'PreMarketChangePercent',
    # 'PreMarketPrice',
    # 'PreMarketTime',
    # 'PrevClose',
    # 'Price',
    # 'PriceToBookRatio',
    # 'PriceToSales',
    # 'ProfitMargin',
    # 'QuarterlyBasicAverageShares',
    # 'QuarterlyBasicEPS',
    # 'QuarterlyCostOfRevenue',
    # 'QuarterlyDate',
    # 'QuarterlyDilutedAverageShares',
    # 'QuarterlyDilutedEPS',
    # 'QuarterlyEarnings',
    # 'QuarterlyEbitda',
    # 'QuarterlyGrossProfit',
    # 'QuarterlyInterestExpense',
    # 'QuarterlyNetIncomeContinuousOperations',
    # 'QuarterlyNormalizedEBITDA',
    # 'QuarterlyOperatingExpenses',
    # 'QuarterlyOperatingIncome',
    # 'QuarterlyOtherIncomeExpense',
    # 'QuarterlyPretaxIncome',
    # 'QuarterlyResearchAndDevelopmentExpense',
    # 'QuarterlyRevenue',
    # 'QuarterlySellingAndMarketingExpense',
    # 'QuarterlySellingGeneralAndAdministration',
    # 'QuarterlyTaxProvision',
    # 'QuoteType',
    # 'RegularMarketTime',
    # 'ReturnOnAssets',
    # 'ReturnOnEquity',
    # 'Revenue.Estimate.Average.Annual',
    # 'Revenue.Estimate.Average.Quarter',
    # 'Revenue.Estimate.High.Annual',
    # 'Revenue.Estimate.High.Quarter',
    # 'Revenue.Estimate.Low.Annual',
    # 'Revenue.Estimate.Low.Quarter',
    # 'Revenue.Estimate.NoAnalysts.Annual',
    # 'Revenue.Estimate.NoAnalysts.Quarter',
    # 'Revenue.Estimate.SalesGrowth.Annual',
    # 'Revenue.Estimate.SalesGrowth.Quarter',
    # 'Revenue.Estimate.YearAgoSales.Annual',
    # 'Revenue.Estimate.YearAgoSales.Quarter',
    # 'RevenueGrowth',
    # 'RevenuePerShare',
    # 'Sector',
    # 'SectorWeightings.BasicMaterials',
    # 'SectorWeightings.CommunicationServices',
    # 'SectorWeightings.ConsumerCyclical',
    # 'SectorWeightings.ConsumerDefensive',
    # 'SectorWeightings.Energy',
    # 'SectorWeightings.FinancialServices',
    # 'SectorWeightings.Healthcare',
    # 'SectorWeightings.Industrials',
    # 'SectorWeightings.RealEstate',
    # 'SectorWeightings.Technology',
    # 'SectorWeightings.Utilities',
    # 'SharesOutstanding',
    # 'SharesShort',
    # 'SharesShortPriorMonth',
    # 'ShortName',
    # 'ShortPercentFloat',
    # 'ShortPercentOutstanding',
    # 'ShortRatio',
    # 'Strike',
    # 'TargetHighPrice',
    # 'TargetLowPrice',
    # 'TargetMeanPrice',
    # 'TargetMedianPrice',
    # 'TotalCash',
    # 'TotalCashPerShare',
    # 'TotalDebt',
    # 'TrailingAnnualDividendRate',
    # 'TrailingAnnualDividendYield',
    # 'TTMCostOfRevenue',
    # 'TTMEbitda',
    # 'TTMGrossProfit',
    # 'TTMInterestExpense',
    # 'TTMNetIncome',
    # 'TTMNetIncomeContinuousOperations',
    # 'TTMNormalizedEBITDA',
    # 'TTMOperatingExpense',
    # 'TTMOperatingIncome',
    # 'TTMOtherIncomeExpense',
    # 'TTMPretaxIncome',
    # 'TTMResearchAndDevelopment',
    # 'TTMRevenue',
    # 'TTMSellingAndMarketingExpense',
    # 'TTMSellingGeneralAndAdministration',
    # 'TTMTaxProvision',
    # 'UnderlyingTicker',
    # 'Yield',
    # 'YTDReturn'
]

# Create a function to fetch data for a specific metric


def get_metric_data(metric):
    try:
        # Fetch financial data using yfinance
        stock = yf.Ticker(stock_symbol)

        if metric == '200DayMovingAverage':
            metric_data = stock.history(period='1y')['Close'].rolling(
                window=200).mean().iloc[-1]
        elif metric == '50DayMovingAverage':
            metric_data = stock.history(period='50d')['Close'].mean()
        elif metric == '52WeekChange':
            metric_data = ((stock.history(period='1y')['Close'][-1] - stock.history(
                period='1y')['Close'][0]) / stock.history(period='1y')['Close'][0]) * 100
        elif metric == '52WeekHigh':
            metric_data = stock.history(period='1y')['Close'].max()
        elif metric == '52WeekLow':
            metric_data = stock.history(period='1y')['Close'].min()
        elif metric == '5YearAverageDividendYield':
            metric_data = stock.info.get(
                'fiveYearAvgDividendYield', 'Data not available')
        elif metric == 'AnalystRecommendation':
            metric_data = stock.info.get(
                'recommendationMean', 'Data not available')
        elif metric == 'AnalystRecommendationRating':
            metric_data = stock.info.get(
                'recommendationKey', 'Data not available')
            

            

        else:
            raise ValueError(f"Error fetching {metric}: Metric not supported")

        return metric_data

    except Exception as e:
        print(f'Error fetching {metric}: {str(e)}')
        return None


# Fetch and print data for each metric
for metric in metrics:
    metric_data = get_metric_data(metric)
    if metric_data is not None:
        print(f'{metric}: {metric_data}')
